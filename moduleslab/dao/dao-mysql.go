package dao

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/iproduct/coursego/moduleslab/model"
	"log"
)

type userRepoMsql struct {
	db *sql.DB
}

func (u userRepoMsql) Find(start, count int) ([]model.User, error) {
	statement := "SELECT id, name, email, password, age FROM users LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, start, count)

	if err != nil {
		return nil, err
	}

	defer rows.Close()

	users := []model.User{}

	for rows.Next() {
		var user model.User
		err := rows.Scan(&user.ID, &user.Name, &user.Email, &user.Password, &user.Age)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	return users, nil

}

func (u userRepoMsql) FindByID(id int) (*model.User, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (u userRepoMsql) FindByEmail(id int) (*model.User, error) {
	return nil, fmt.Errorf("Not implemented")
}

//Create creates and returns new user with autogenerated ID
func (u *userRepoMsql) Create(user *model.User) (*model.User, error) {
	statement := "INSERT INTO users(name, email, password, age) VALUES(?, ?, ?, ?)"
	result, err := u.db.Exec(statement, user.Name, user.Email, user.Password, user.Age)

	if err != nil {
		return nil, err
	}

	id, err := result.LastInsertId()
	user.ID = int(id)
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}

	return user, nil
	//return nil, errors.New("Not implemented")
}

func (u userRepoMsql) Update(user *model.User) (*model.User, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (u userRepoMsql) DeleteByID(id int) (*model.User, error) {
	return nil, fmt.Errorf("Not implemented")
}

func NewUserRepoMysql(user, password, dbname string) UserRepo {
	connectionString := fmt.Sprintf("%s:%s@/%s", user, password, dbname)
	repo := &userRepoMsql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}
