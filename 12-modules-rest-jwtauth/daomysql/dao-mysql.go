package daomysql

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/iproduct/coursego/12-modules-rest-jwtauth/model"
	"log"
)

type UserRepoMysql struct {
	db *sql.DB
}

func (u UserRepoMysql) Find(start, count int) ([]model.User, error) {
	statement := "SELECT id, name, email, password, age, active FROM users LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	users := []model.User{}
	for rows.Next() {
		var user model.User
		err := rows.Scan(&user.ID, &user.Name, &user.Email, &user.Password, &user.Age, &user.Active)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return users, nil
}

//FindById return users by user ID or error otherwise
func (u *UserRepoMysql) FindByID(id int) (*model.User, error) {
	user := &model.User{}
	statement := "SELECT id, name, email, password, age, active FROM users WHERE id= ?"
	err := u.db.QueryRow(statement, id).Scan(&user.ID, &user.Name, &user.Email, &user.Password, &user.Age, &user.Active)
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (u UserRepoMysql) FindByEmail(email string) (*model.User, error) {
	user := &model.User{}
	statement := "SELECT id, name, email, password, age, active FROM users WHERE email= ?"
	err := u.db.QueryRow(statement, email).Scan(&user.ID, &user.Name, &user.Email, &user.Password, &user.Age, &user.Active)
	if err != nil {
		return nil, err
	}
	return user, nil
}

//Create creates and returns new user with autogenerated ID
func (u *UserRepoMysql) Create(user *model.User) (*model.User, error) {
	statement := "INSERT INTO users(name, email, password, age, active) VALUES(?, ?, ?, ?, ?)"
	result, err := u.db.Exec(statement, user.Name, user.Email, user.Password, user.Age, user.Active)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	user.ID = int(id)
	//err = r.db.QueryRow("SELECT LAST_INSERT_ID()").Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

//Update updates existing user data
func (u *UserRepoMysql) Update(user *model.User) (*model.User, error) {
	statement := "UPDATE users SET name=?, password=?, age=?, active=? WHERE id=? "
	_, err := u.db.Exec(statement, user.Name, user.Password, user.Age, user.Active, user.ID)
	return user, err
}

//DeleteById removes and returns user with specified ID or error otherwise
func (u *UserRepoMysql) DeleteByID(id int) (*model.User, error) {
	user, err := u.FindByID(id)
	if err != nil {
		return nil, err
	}
	statement := fmt.Sprintf("DELETE FROM users WHERE id=%d", id)
	_, err = u.db.Exec(statement)
	return user, err
}

func NewUserRepoMysql(user, password, dbname string) *UserRepoMysql {
	connectionString := fmt.Sprintf("%s:%s@/%s", user, password, dbname)
	repo := &UserRepoMysql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}
